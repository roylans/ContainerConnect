---
// Fetch registration count from API
let registrationCount = 100; // fallback value for national scale
let remainingSlots = 200 - registrationCount; // Total 200 slots available
try {
  const response = await fetch(`${Astro.url.origin}/api/stats`);
  if (response.ok) {
    const data = await response.json();
    registrationCount = (data.totalRegistrations || 0) + 100;
    remainingSlots = Math.max(0, 200 - registrationCount);
  }
} catch (error) {
  console.error('Error fetching registration count:', error);
}
---

<section class="hero">
  <div class="hero-background"></div>
  <div class="container">
    <div class="hero-content">
      <div class="badge">
        ðŸš§ PRÃ“XIMO LANZAMIENTO
      </div>
      <h1 class="hero-title">
        Alquila Contenedores para Obras
      </h1>
      <h2 class="hero-subtitle-bold">
        <span class="highlight">Entrega en 24h, Ahorra hasta 15%</span>
      </h2>
      <p class="hero-subtitle">
        Conecta con los mejores proveedores locales en 2 minutos. Sin intermediarios, precios transparentes y gestiÃ³n 100% online. OlvÃ­date de buscar proveedores o lidiar con procesos complicados.
      </p>
      <div class="hero-stats">
        <div class="stat">
          <span class="stat-number" id="registrationCounter">{registrationCount}</span>
          <span class="stat-label">usuarios ya registradas en toda EspaÃ±a</span>
        </div>
      </div>
      <div class="hero-ctas">
        <a href="#registro" class="btn btn-primary btn-hero">
          Obtener Acceso Prioritario GRATIS ({remainingSlots} plazas restantes)
        </a>
        <a href="mailto:hola@containerconnect.es?subject=Consulta sobre alquiler de contenedores" class="btn btn-secondary btn-hero-secondary">
          ðŸ“ž Consulta Gratuita
        </a>
      </div>
      <p class="hero-disclaimer">
        Sin spam. Solo te avisaremos cuando estÃ© listo.
      </p>
    </div>
  </div>
</section>

<style>
  .hero {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    color: white;
    text-align: center;
  }
  
  .hero-background {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(rgba(33, 37, 41, 0.7), rgba(46, 134, 171, 0.8)),
                url('https://images.unsplash.com/photo-1504307651254-35680f356dfd?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80') center/cover;
    z-index: -1;
  }
  
  .hero-content {
    max-width: 800px;
    margin: 0 auto;
  }
  
  .badge {
    display: inline-block;
    background-color: var(--primary-color);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 25px;
    font-weight: 600;
    font-size: 0.9rem;
    margin-bottom: 1.5rem;
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }
  
  .hero-title {
    font-size: 3.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    line-height: 1.1;
  }
  
  .hero-subtitle-bold {
    font-size: 2rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    line-height: 1.2;
  }
  
  .highlight {
    color: var(--primary-color);
  }
  
  .hero-subtitle {
    font-size: 1.3rem;
    margin-bottom: 2rem;
    opacity: 0.9;
    line-height: 1.5;
  }
  
  .hero-stats {
    margin: 2rem 0;
  }
  
  .stat {
    display: inline-block;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    padding: 1rem 2rem;
    border-radius: 15px;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }
  
  .stat-number {
    display: block;
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--primary-color);
    font-family: 'Montserrat', sans-serif;
  }
  
  .stat-label {
    font-size: 0.9rem;
    opacity: 0.8;
  }
  
  .hero-ctas {
    display: flex;
    gap: 1rem;
    justify-content: center;
    align-items: center;
    flex-wrap: wrap;
    margin: 1rem 0;
  }
  
  .btn-hero {
    font-size: 1.2rem;
    padding: 1.2rem 2.5rem;
  }
  
  .btn-hero-secondary {
    font-size: 1.1rem;
    padding: 1rem 2rem;
    background: rgba(255, 255, 255, 0.1);
    border: 2px solid var(--primary-color);
    color: white;
    text-decoration: none;
    border-radius: 8px;
    font-weight: 600;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
  }
  
  .btn-hero-secondary:hover {
    background: var(--primary-color);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(255, 107, 53, 0.3);
  }
  
  .hero-disclaimer {
    font-size: 0.9rem;
    opacity: 0.7;
    margin-top: 1rem;
  }
  
  @media (max-width: 768px) {
    .hero-title {
      font-size: 2.5rem;
    }
    
    .hero-subtitle-bold {
      font-size: 1.5rem;
    }
    
    .hero-subtitle {
      font-size: 1.1rem;
    }
    
    .stat-number {
      font-size: 2rem;
    }
    
    .hero-ctas {
      flex-direction: column;
      gap: 0.8rem;
    }
    
    .btn-hero {
      font-size: 1rem;
      padding: 1rem 2rem;
      width: 100%;
      max-width: 320px;
    }
    
    .btn-hero-secondary {
      font-size: 0.95rem;
      padding: 0.9rem 1.5rem;
      width: 100%;
      max-width: 280px;
    }
  }
</style>

<script>
  // Animate counter from 0 to target value
  function animateCounter(element, target) {
    const duration = 3000; // 3 seconds
    const fps = 30; // 30 frames per second
    const totalFrames = (duration / 1000) * fps;
    const increment = target / totalFrames;
    
    let currentFrame = 0;
    element.textContent = '0';
    
    // Wait 500ms before starting animation
    setTimeout(() => {
      const timer = setInterval(() => {
        currentFrame++;
        const currentValue = Math.floor(increment * currentFrame);
        element.textContent = Math.min(currentValue, target).toString();
        
        if (currentFrame >= totalFrames || currentValue >= target) {
          element.textContent = target.toString();
          clearInterval(timer);
        }
      }, 1000 / fps); // ~33ms per frame
    }, 500);
  }

  // Fetch and update counter from API
  async function updateCounterFromAPI() {
    try {
      const response = await fetch('/api/stats');
      if (response.ok) {
        const data = await response.json();
        const counter = document.getElementById('registrationCounter');
        if (counter && data.totalRegistrations !== undefined) {
          const totalWithBase = (data.totalRegistrations || 0) + 100;
          animateCounter(counter, totalWithBase);
        }
      }
    } catch (error) {
      console.error('Error updating counter:', error);
    }
  }

  // Initialize counter animation on page load
  document.addEventListener('DOMContentLoaded', () => {
    const counter = document.getElementById('registrationCounter');
    if (counter) {
      const initialValue = parseInt(counter.textContent) || 100;
      animateCounter(counter, initialValue);
    }
  });
  
  // Update counter every 30 seconds to keep it fresh
  setInterval(updateCounterFromAPI, 30000);
  
  // Also update when page becomes visible (tab switching)
  document.addEventListener('visibilitychange', () => {
    if (!document.hidden) {
      updateCounterFromAPI();
    }
  });
</script>